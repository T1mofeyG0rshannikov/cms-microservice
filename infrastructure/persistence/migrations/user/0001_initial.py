# Generated by Django 5.0 on 2025-07-13 04:35

import ckeditor.fields
import django.db.models.deletion
import django.utils.timezone
import infrastructure.files.file_storage
import infrastructure.persistence.models.user.idea
import infrastructure.persistence.models.user.product
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('catalog', '0001_initial'),
        ('settings', '0001_initial'),
        ('site_tests', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Roles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Роли',
                'verbose_name_plural': 'Роли',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(max_length=100, verbose_name='Имя пользователя')),
                ('second_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Фамлия')),
                ('phone', models.CharField(max_length=12, null=True, verbose_name='Номер телефона')),
                ('phone_is_confirmed', models.BooleanField(default=False, verbose_name='Телефон подтвержден')),
                ('email', models.CharField(max_length=200, null=True, verbose_name='E-mail')),
                ('new_email', models.CharField(blank=True, max_length=200, null=True, verbose_name='новый E-main')),
                ('email_is_confirmed', models.BooleanField(default=False, verbose_name='Почта подтверждена')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='пользователь создан')),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='', verbose_name='аватарка')),
                ('staff', models.BooleanField(default=False)),
                ('supersponsor', models.BooleanField(default=False, verbose_name='Главный спонсор')),
                ('test', models.BooleanField(default=False, verbose_name='тестовый пользователь')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('register_on_domain', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='register_on_domain', to='settings.domain', verbose_name='зарегистрирован на домене')),
                ('sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsors', to=settings.AUTH_USER_MODEL, verbose_name='Спонсор')),
                ('test_set', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='site_tests.testuserset')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Idea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('errors', 'Ошибка в работе'), ('correction', 'Исправление'), ('modernization', 'Улучшение'), ('new_feature', 'Новая возможность')], max_length=100, verbose_name='категория')),
                ('status', models.CharField(choices=[('new', 'Новое'), ('in_pregress', 'В работе'), ('planned', 'Запланировано'), ('done', 'Реализовано'), ('reject', 'Отклонено'), ('repeat', 'Повтор')], default='new', max_length=100, verbose_name='статус')),
                ('finishe_date', models.DateField(null=True, verbose_name='Срок')),
                ('created_at', models.DateField(auto_now_add=True)),
                ('title', models.CharField(max_length=60, verbose_name='Тема')),
                ('description', models.TextField(max_length=1000, verbose_name='Описание')),
                ('admin_answer', ckeditor.fields.RichTextField(blank=True, max_length=1000, null=True, verbose_name='Ответ')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ideas', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Предложение',
                'verbose_name_plural': 'Предложения',
            },
        ),
        migrations.CreateModel(
            name='IdeaScreen',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('screen', models.ImageField(storage=infrastructure.files.file_storage.OverwriteStorage(), upload_to=infrastructure.persistence.models.user.idea.get_upload_to_idea_screen)),
                ('idea', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='screens', to='user.idea')),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('idea', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='user.idea')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subdomain', models.CharField(max_length=50, unique=True, verbose_name='поддомен')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='images/logo', verbose_name='Лого')),
                ('logo_width', models.CharField(blank=True, max_length=20, null=True, verbose_name='ширина лого')),
                ('logo_width_mobile', models.CharField(blank=True, max_length=20, null=True, verbose_name='ширина лого(мобильный)')),
                ('logo2', models.ImageField(blank=True, null=True, upload_to='images/logo', verbose_name='Лого для форм')),
                ('is_active', models.BooleanField(default=True, verbose_name='активный')),
                ('use_default_settings', models.BooleanField(default=False, verbose_name='Использовать общие настройки сайта')),
                ('advertising_channel', models.CharField(max_length=100, null=True, verbose_name='Рекламный канал')),
                ('online_from', models.DateField(default=django.utils.timezone.now, verbose_name='онлайн с')),
                ('name', models.CharField(max_length=50, verbose_name='Название сайта')),
                ('font_size', models.PositiveIntegerField(null=True, verbose_name='размер шрифта')),
                ('owner', models.CharField(max_length=150, null=True, verbose_name='Владелец')),
                ('contact_info', models.CharField(max_length=200, null=True, verbose_name='Контактная информация')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='сайт создан')),
                ('domain', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='settings.domain', verbose_name='домен')),
                ('font', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='settings.userfont', verbose_name='шрифт')),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='site', to=settings.AUTH_USER_MODEL, verbose_name='пользователь')),
            ],
            options={
                'verbose_name': 'сайт',
                'verbose_name_plural': 'сайты',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='register_on_site',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='register_on_site', to='user.site', verbose_name='зарегистрирован на сайте'),
        ),
        migrations.CreateModel(
            name='SuperUserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='user.roles')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserOffer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('link', models.CharField(max_length=1000, verbose_name='Ссылка')),
                ('offer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catalog.offer', verbose_name='оффер')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offers', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.CreateModel(
            name='UserProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connected', models.DateField(null=True, verbose_name='Подключен')),
                ('profit', models.DateField(null=True, verbose_name='Бонус')),
                ('got', models.DateField(null=True, verbose_name='Получен')),
                ('connected_with_link', models.BooleanField(null=True, verbose_name='Подключен по ссылке')),
                ('redirections', models.PositiveIntegerField(default=0, verbose_name='Переходы')),
                ('screen', models.ImageField(null=True, upload_to=infrastructure.persistence.models.user.product.user_directory_path, verbose_name='скриншот')),
                ('comment', models.CharField(max_length=1000, null=True, verbose_name='Комментарий')),
                ('gain', models.PositiveIntegerField(default=0, verbose_name='Доход')),
                ('fully_verified', models.BooleanField(default=False, verbose_name='Полностью подтверждён')),
                ('created_at', models.DateField(auto_now_add=True, null=True)),
                ('deleted', models.BooleanField(default=False, verbose_name='Удален')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_products', to='catalog.product', verbose_name='Продукт')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='products', to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'Пользовательские продукты',
                'verbose_name_plural': 'Пользовательские продукты',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['sponsor_id'], name='user_user_sponsor_9e3e2d_idx'),
        ),
    ]
